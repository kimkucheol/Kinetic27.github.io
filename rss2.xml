<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Kinetic&#39;s BLOG</title>
    <link>http://kinetic27.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>개인용 블로그입니다</description>
    <pubDate>Thu, 26 Dec 2019 18:15:31 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>텐서플로우 &amp; 파이썬 환경 구축하기</title>
      <link>http://kinetic27.github.io/2019/05/24/tensorflow-development-environment/</link>
      <guid>http://kinetic27.github.io/2019/05/24/tensorflow-development-environment/</guid>
      <pubDate>Fri, 24 May 2019 07:03:00 GMT</pubDate>
      <description>
      
        
        
          &lt;hr&gt;
&lt;h1 id=&quot;개발-환경-소개&quot;&gt;&lt;a href=&quot;#개발-환경-소개&quot; class=&quot;headerlink&quot; title=&quot;개발 환경 소개&quot;&gt;&lt;/a&gt;개발 환경 소개&lt;/h1&gt;&lt;p&gt;이번에 구축할 개발 환경은 텐서플로우(Tensorflow)와 파이썬(Pyt
        
      
      </description>
      
      
      <content:encoded><![CDATA[<hr><h1 id="개발-환경-소개"><a href="#개발-환경-소개" class="headerlink" title="개발 환경 소개"></a>개발 환경 소개</h1><p>이번에 구축할 개발 환경은 텐서플로우(Tensorflow)와 파이썬(Python)을 이용합니다.</p><p><img src="python.png" alt="python_logo"></p><blockquote><p><strong>파이썬</strong>은 1991년 프로그래머인 귀도 반 로섬이 발표한 고급 프로그래밍 언어로, 플랫폼 독립적이며 <strong>인터프리터식</strong>, <strong>객체지향적</strong>, <strong>동적 타이핑 대화형</strong> 언어입니다.</p></blockquote><p>파이썬은 방대한 라이브러리를 지원하여 높은 생산성과 빠른 개발 속도를 가진것이 특징입니다.<br></p><p><img src="tensorflow.png" alt="tensorflow_logo"></p><blockquote><p><strong>텐서플로우</strong> 는 구글에서 지원하는 파이썬 환경에서 딥러닝과 같은 인공지능 기법들을 쉽게 구현하도록 도와주는 오픈소스 라이브러리입니다.</p></blockquote><p>텐서플로우는 계산 구조와 목표 함수만 정의하면 자동으로 미분 계산을 처리해줘 매우 편리합니다.<br></p><hr><h1 id="파이썬-설치"><a href="#파이썬-설치" class="headerlink" title="파이썬 설치"></a>파이썬 설치</h1><br>그럼 바로 Python부터 설치해봅시다.<p>먼저 <a href="https://www.python.org/downloads/windows/" rel="external nofollow noopener noreferrer" target="_blank">https://www.python.org/downloads/windows/</a> 에 들어갑니다.</p><p>여러 가지 버전 중 자신의 컴퓨터에 해당하는 버전을 설치해봅시다.</p><p><img src="py_install.png" alt="py_install"></p><p>저는 여기에서 윈도우 <code>Windows x86 executable installer</code>버전을 설치하겠습니다.</p><p><img src="py_install_window.png" alt="py_install"></p><p>이때 여기에서</p><ul><li><input checked disabled type="checkbox"> <em>Add Python {version} to Path</em></li></ul><p>를 꼭 체크해주세요!!</p><p>이를 체크해야 환경 변수에 파이썬 경로가 추가되어서 어떤 곳에서 나 <code>python</code>을 사용할 수 있습니다.</p><p>설치가 되었다면 <code>Window + R</code>을 눌러 명령 프롬프트(CMD)창을 실행시켜줍니다.</p><p><img src="execution_cmd.png" alt="py_cmd"></p><p>그 다음 <code>python</code>을 입력하여 잘 작동하는지 확인하고 창을 닫아줍니다.</p><p><img src="cmd_1.png" alt="py_cmd_1"></p><p>여기서 Python을 찾을 수 없다는 메시지가 뜨면 아까 설치 과정에서</p><ul><li><input checked disabled type="checkbox"> <em>Add Python {version} to Path</em></li></ul><p>를 체크하지 않아서 환경 변수에 추가가 안된 경우입니다.</p><p>그럴 경우 다시 설치 파일을 실행시켜 파이썬을 제거 후 위의 파이썬 설치 과정을 다시 진행하면 됩니다.</p><hr><h1 id="텐서플로우-Tensorflow-설치"><a href="#텐서플로우-Tensorflow-설치" class="headerlink" title="텐서플로우(Tensorflow) 설치"></a>텐서플로우(Tensorflow) 설치</h1><p>다시 <code>Window + R</code>을 눌러 명령 프롬프트(CMD)창을 실행시켜줍니다.</p><p><img src="execution_cmd.png" alt="py_exe_cmd"></p><p>먼저 <code>pip3 install --upgrade pip</code>로 pip를 업그레이드 해준 후</p><p><img src="cmd_2.png" alt="py_cmd_2"></p><p><code>pip3 install tensorflow</code>를 입력하여 텐서플로우를 설치해줍니다.</p><p><img src="cmd_3.png" alt="py_cmd_3"></p><p>여기서 <code>pip</code>는 파이썬으로 작성된 패키지 소프트웨어를 설치 &amp; 관리하는 패키지 관리 시스템을 말합니다.</p><p>이제 <code>python</code>을 입력하여 파이썬 커멘드(Command) 라인으로 들어가줍니다.</p><p>한번 잘 작동하는지 아래의 코드를 입력하여 테스트를 해봅시다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">hello = tf.constant(<span class="string">'Hello World!'</span>)</span><br><span class="line">sess = tf.Session()</span><br></pre></td></tr></table></figure><p><img src="cmd_4.png" alt="py_cmd_4"></p><p>이 스크린샷처럼</p><p><code>I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2</code></p><p>와 같은 오류가 뜰 수 있는데, 이는 직역하면</p><p><code>당신의 CPU는 이 텐서플로우 바이너리가 사용하지 않은 명령어(instructions)들을 지원한다.</code></p><p>라는 뜻으로 실행 속도를 더 개선시킬 수 있으므로 컴파일 옵션을 최적화하라는 경고 메시지이므로 무시하고 넘어갑니다.</p><blockquote><p><strong><em>경고 상세 설명</em></strong></p><p>최신 CPU들은 AVX, SSE4 같은 명령어들을 제공합니다.<br><br><br>이 명령어들은 CPU가 선형대수(Linear Algebra) 연산을 좀 더 빠르게 수행할 수 있도록 도와주는 역할을 합니다.<br><br><br>머신러닝에서 학습 동작은 이런 선형대수 연산을 사용하기 때문에 선형대수 연산의 속도 개선은 학습 속도 개선으로 이어지게 되는 것입니다.<br><br><br>이런 CPU Instruction을 이용할 경우 학습 속도가 300%까지 빨라질 수 있다고 합니다.</p></blockquote><blockquote><p>(해결법 및 설명 원문 : <a href="https://stackoverflow.com/questions/47068709/your-cpu-supports-instructions-that-this-tensorflow-binary-was-not-compiled-to-u" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/47068709/your-cpu-supports-instructions-that-this-tensorflow-binary-was-not-compiled-to-u</a>)</p></blockquote><p>그다음 이어서 <code>print(sess.run(hello))</code>를 입력하여 아까 얻어온 세션의 값을 콘솔 창에 출력해 봅시다.</p><p><img src="cmd_5.png" alt="py_cmd_5"></p><p>위 사진과 같이 <code>b&#39;Hello World!&#39;</code>가 출력되는 것을 볼 수 있습니다.</p><p>여기서 b는 자료 구조와 관련된 키워드이므로 지금은 넘어가도록 하겠습니다.</p><p><span style="color:orange;">이렇게 파이썬과 텐서플로우 설치를 마치도록 하겠습니다!!</span></p>]]></content:encoded>
      
      <comments>http://kinetic27.github.io/2019/05/24/tensorflow-development-environment/#disqus_thread</comments>
    </item>
    
    <item>
      <title>파이썬 셀레니움으로 네이버 기사 댓글 크롤링하기</title>
      <link>http://kinetic27.github.io/2019/05/20/python-naver-crawling/</link>
      <guid>http://kinetic27.github.io/2019/05/20/python-naver-crawling/</guid>
      <pubDate>Mon, 20 May 2019 06:37:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;파이썬-셀레니움으로-네이버-기사-댓글-크롤링하기&quot;&gt;&lt;a href=&quot;#파이썬-셀레니움으로-네이버-기사-댓글-크롤링하기&quot; class=&quot;headerlink&quot; title=&quot;파이썬 셀레니움으로 네이버 기사 댓글 크롤링하기&quot;&gt;&lt;/a&gt;파이썬 셀레니움
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="파이썬-셀레니움으로-네이버-기사-댓글-크롤링하기"><a href="#파이썬-셀레니움으로-네이버-기사-댓글-크롤링하기" class="headerlink" title="파이썬 셀레니움으로 네이버 기사 댓글 크롤링하기"></a>파이썬 셀레니움으로 네이버 기사 댓글 크롤링하기</h2><br><blockquote><p><strong>코드</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(os.getcwd() + <span class="string">'/chromedriver'</span>)</span><br><span class="line">driver.implicitly_wait(<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">'https://news.naver.com/main/read.nhn?m_view=1&amp;includeAllCount=true&amp;mode=LSD&amp;mid=sec&amp;sid1=102&amp;oid=003&amp;aid=0009172141'</span>)</span><br><span class="line"></span><br><span class="line">cBox = driver.find_elements_by_css_selector(<span class="string">'div[class=u_cbox_comment_box]'</span>)</span><br><span class="line">cList = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(cBox.__len__()):</span><br><span class="line">    cList.append(cBox[i].find_element_by_css_selector(<span class="string">'span[class=u_cbox_contents]'</span>).text)</span><br><span class="line"></span><br><span class="line">print(cList)</span><br></pre></td></tr></table></figure><br><p>보다시피 기사의 댓글들을 담아둔 div를 cssSelector를 통해서 <em>div[class=u_cbox_comment_box]</em> 가져오고<br>반복문을 돌며 각각의 텍스트를 가져와 cList에 담는 간단한 코드입니다.</p>]]></content:encoded>
      
      <comments>http://kinetic27.github.io/2019/05/20/python-naver-crawling/#disqus_thread</comments>
    </item>
    
    <item>
      <title>코틀린으로 짠 마름모 별찍기</title>
      <link>http://kinetic27.github.io/2019/02/13/kotlin-star/</link>
      <guid>http://kinetic27.github.io/2019/02/13/kotlin-star/</guid>
      <pubDate>Wed, 13 Feb 2019 00:02:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Kotlin으로-Int범위의-양수-n을-입력해주면-한-변의-길이가-n인-마름모를-출력&quot;&gt;&lt;a href=&quot;#Kotlin으로-Int범위의-양수-n을-입력해주면-한-변의-길이가-n인-마름모를-출력&quot; class=&quot;headerlink&quot; title
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Kotlin으로-Int범위의-양수-n을-입력해주면-한-변의-길이가-n인-마름모를-출력"><a href="#Kotlin으로-Int범위의-양수-n을-입력해주면-한-변의-길이가-n인-마름모를-출력" class="headerlink" title="Kotlin으로 Int범위의 양수 n을 입력해주면 한 변의 길이가 n인 마름모를 출력!"></a>Kotlin으로 Int범위의 양수 n을 입력해주면 한 변의 길이가 n인 마름모를 출력!</h2><br><blockquote><p><strong>코드</strong></p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> n = Scanner(System.`<span class="keyword">in</span>`).nextInt() - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">   ((<span class="number">0</span> until n) + (n downTo <span class="number">0</span>)).forEach &#123;</span><br><span class="line">       println(<span class="string">"<span class="subst">$&#123;<span class="string">" "</span>.repeat(n - it)&#125;</span>*<span class="subst">$&#123;<span class="string">"*"</span>.repeat(<span class="number">2</span> * it)&#125;</span>"</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><strong>입력</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ex) 9</span><br></pre></td></tr></table></figure><br><p><strong>출력</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">        *</span><br><span class="line">       ***</span><br><span class="line">      *****</span><br><span class="line">     *******</span><br><span class="line">    *********</span><br><span class="line">   ***********</span><br><span class="line">  *************</span><br><span class="line"> ***************</span><br><span class="line">*****************</span><br><span class="line"> ***************</span><br><span class="line">  *************</span><br><span class="line">   ***********</span><br><span class="line">    *********</span><br><span class="line">     *******</span><br><span class="line">      *****</span><br><span class="line">       ***</span><br><span class="line">        *</span><br></pre></td></tr></table></figure><p>잘 작동합니다 :)</p>]]></content:encoded>
      
      <comments>http://kinetic27.github.io/2019/02/13/kotlin-star/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Welcome to GitPage!</title>
      <link>http://kinetic27.github.io/2019/02/12/first-post/</link>
      <guid>http://kinetic27.github.io/2019/02/12/first-post/</guid>
      <pubDate>Tue, 12 Feb 2019 05:17:40 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;깃 페이지 신설 및 업그레이드!&lt;/p&gt;

        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>깃 페이지 신설 및 업그레이드!</p>]]></content:encoded>
      
      <comments>http://kinetic27.github.io/2019/02/12/first-post/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
